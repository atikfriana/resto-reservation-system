// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  password        String
  phone           String?
  role            Role      @default(CUSTOMER)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  bookings        Booking[]
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

model Menu {
  id          String        @id @default(uuid())
  name        String
  description String?
  price       Float
  image       String?
  categoryId  String
  category    MenuCategory  @relation(fields: [categoryId], references: [id])
  isAvailable Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  orderItems  OrderItem[]
}

model MenuCategory {
  id        String   @id @default(uuid())
  name      String   @unique
  menus     Menu[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Table {
  id          String    @id @default(uuid())
  tableNumber Int       @unique
  capacity    Int
  isAvailable Boolean   @default(true)
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Booking {
  id             String        @id @default(uuid())
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  tableId        String
  table          Table         @relation(fields: [tableId], references: [id])
  dateTime       DateTime
  duration       Int           @default(120) // dalam menit
  guestCount     Int
  specialRequest String?
  status         BookingStatus @default(PENDING)
  orders         Order[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Order {
  id         String      @id @default(uuid())
  bookingId  String
  booking    Booking     @relation(fields: [bookingId], references: [id])
  items      OrderItem[]
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  menuId    String
  menu      Menu     @relation(fields: [menuId], references: [id])
  quantity  Int      @default(1)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PREPARING
  COMPLETED
  CANCELLED
}